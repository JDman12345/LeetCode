class Solution {
public:
    int shipWithinDays(vector<int>& weights, int days) {
        int ans = 0;
        int l = 0;
        int r = 0;
        int cap = 0;

        int highest = weights[0];
        for(int i = 0; i < weights.size(); i++){ // Initializes lower and upper bound
            r += weights[i];
            if(weights[i] > highest){
                highest = weights[i];
            }
        }
        ans = r;

        while(l <= r){
            cap = ((l + r) / 2);
            if(canShip(cap , weights, days)){
                ans = min(ans, cap);
                r = cap - 1;
            }else{
                l = cap + 1;
            }
        }
        return ans;
    }

    bool canShip(int cap, vector<int>& weights, int days){
        int currCap = cap;
        int shipsUsed = 1;
        for(int i = 0; i < weights.size(); i++){
            if(cap < weights[i]){
                return false;
            }
            if(currCap - weights[i] < 0){
                shipsUsed++;
                currCap = cap;
            }
            currCap -= weights[i];
        }
        return(shipsUsed <= days);
    }
};
