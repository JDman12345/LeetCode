class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        vector<vector<long long>> ans;
        vector<long long> quad;
        vector<vector<int>> ac_res;

        if(nums.size() < 4) return ac_res;

        kSum(4, 0, target, nums, quad, ans);

        for(int i = 0; i < ans.size(); i++){
            vector <int> temp2;
            for(int j = 0; j < ans[i].size(); j++){
                
                temp2.push_back((int) ans[i][j]);

            }
            ac_res.push_back(temp2);
        }
        return ac_res;
    }

    void kSum(int k, int start, long long target, vector<int>& nums, vector<long long> quad, vector<vector<long long>>& ans){
        if(k != 2){
            for(int i = start; i < nums.size() - k + 1; i++){
                if(i > start && nums[i] == nums[i - 1]) continue;
                
                quad.push_back(nums[i]);
                kSum(k - 1, i + 1, target - nums[i], nums, quad, ans);
                quad.pop_back();
            }
            return;
        }else{
            int l = start;
            int r = nums.size() - 1;
            while(l < r){
                if(nums[l] + nums[r] < target){
                    l += 1;
                }else if(nums[l] + nums[r] > target){
                    r -= 1;
                }else{
                    quad.push_back(nums[l]);
                    quad.push_back(nums[r]);
                    ans.push_back(quad);
                    quad.pop_back();
                    quad.pop_back();
                    l += 1;
                    while(l < r && nums[l] == nums[l - 1]){
                        l += 1;
                    }
                }
            }
        }
    }
};
