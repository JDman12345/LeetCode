class Solution {
public:
    int maximalRectangle(vector<vector<char>>& M) {
        int ans = 0;
        vector<int> curr(M[0].size(), 0);
        for(int i = 0; i < M.size(); i++){
            cout << i;
            for(int j = 0; j < M[i].size(); j++){
                if (M[i][j] == '1'){
                    curr[j] += 1;
                }else{
                    curr[j] = 0;
                }
            }
            
            ans = max(ans, largestRectangleArea(curr));
        }
        return ans;
    }

    int largestRectangleArea(vector<int>& heights) {
        // Implemented with two stacks but you could use the index stack and the given height vector like this heights[is.top()]
        int maxArea = 0;
        stack<int> hs;
        stack<int> is;
        int start = 0;
        int index = 0;
        int height = 0;

        for(int i = 0; i < heights.size(); i++){
            start = i;
            while(!hs.empty() && hs.top() > heights[i]){
                height = hs.top();
                index = is.top();
                hs.pop();
                is.pop();

                maxArea = max(maxArea, height * (i - index));
                start = index;
            }
            hs.push(heights[i]);
            is.push(start);
        }

        while(!hs.empty() && !is.empty()){
            int j = (hs.top() * (heights.size() - is.top()));
            maxArea = max(maxArea, j);
            hs.pop();
            is.pop();
        }

        return maxArea;
    }
};
